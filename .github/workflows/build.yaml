# This is a basic workflow to help you get started with Actions

name: Build

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Build ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    env:
      OS: ${{ matrix.config.name }}
      QT_VERSION: "5.15.0"
      QT_CREATOR_VERSION: "4.13"
    strategy:
      matrix:
        config:
          - { name: "win64", os: windows-latest, hunspell: "hunspell:x64-windows-static", qt_arch: "win64_msvc2019_64", qtc_platform: "windows_x64"}
          - { name: "win32", os: windows-latest, hunspell: "hunspell:x86-windows-static", qt_arch: "win32_msvc2019",    qtc_platform: "windows_x86"}
          - { name: "linux", os: ubuntu-16.04,   hunspell: "hunspell",                    qt_arch: "",                  qtc_platform: "linux_x64"}
          - { name: "macos", os: macos-latest,   hunspell: "hunspell",                    qt_arch: "",                  qtc_platform: "mac_x64"}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Display the path
        shell: pwsh
        run: echo ${env:PATH}

      - name: Display the Matrix Info
        shell: pwsh
        run: |
          Write-Output "<+> Matrix info: "
          Write-Output "  <-> Name: ${{matrix.config.name}}"
          Write-Output "  <-> OS  : ${{matrix.config.os}}"

      - name: Setup MSBuild
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v1.0.1

      - name: Test MSBuild
        if: runner.os == 'Windows'
        run: |
          msbuild -version

      - name: Test Make
        if: runner.os != 'Windows'
        run: |
          make --version

      - name: Vcpkg - Hunspell
        uses: lukka/run-vcpkg@v3
        with:
          vcpkgArguments: ${{matrix.config.hunspell}}
          vcpkgGitCommitId: 56fffbe49dfb4dd8fae0940f272c5fd2b86be991

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{env.QT_VERSION}}
          arch: ${{matrix.config.qt_arch}}

      - name: Test Qt
        shell: pwsh
        run: |
          qmake --version

      - name: Donwload Qt Creator
        shell: pwsh
        run: |
          $PSVersionTable
          ${QTC_BASE_URL} = "https://download.qt.io/official_releases/qtcreator/${env:QT_CREATOR_VERSION}/${env:QT_CREATOR_VERSION}.0"

          ${QTC_PACKAGES} = "qtcreator", "qtcreator_dev"
          foreach (${QTC_PACKAGE} in ${QTC_PACKAGES}) {
            Write-Output "<+> Downloading Package: ${QTC_PACKAGE}"
            ${QTC_7Z} = "${QTC_PACKAGE}.7z"
            ${QTC_URL} = "${QTC_BASE_URL}/installer_source/${{matrix.config.qtc_platform}}/${QTC_7Z}"
            Write-Output "  <-> URL: ${QTC_URL}"
            ${QTC_URL_RESOLVED} = ${QTC_URL}
            try {
                Invoke-WebRequest -Method HEAD ${QTC_URL} -MaximumRedirection 0 -ErrorAction Stop
            } catch {
                ${QTC_URL_RESOLVED} = $_.Exception.Response.Headers.Location
            }
            Write-Output "  <-> Resolved URL: ${QTC_URL_RESOLVED}"
            Invoke-WebRequest -Uri "${QTC_URL_RESOLVED}" -OutFile "${QTC_7Z}"

            Write-Output "  <-> Extracting archive"
            7z x "${QTC_7Z}" -aoa -o"qtcreator"
          }

          Write-Output "::set-env name=QTC_BIN_DIR::qtcreator/bin"
          Write-Output "::set-env name=QTC_SOURCE::qtcreator"
          Write-Output "::set-env name=QTC_BUILD::qtcreator"

      - name: Checkout Plugin
        uses: actions/checkout@v2
        with:
          repository: CJCombrink/SpellChecker-Plugin

      - name: Build Plugin
        shell: pwsh
        run: |
          switch ("${{runner.os}}")
          {
              "Windows" {
                  ${MAKE_CMD} = "${env:QTC_BIN_DIR}/jom"
              }
              Default {
                  ${MAKE_CMD} = make
              }
          }

          Get-ChildItem "${VCPKG_ROOT}/installed"
          qmake "SpellChecker-Plugin\spellchecker.pro" "LOCAL_HUNSPELL_SRC_DIR=${VCPKG_ROOT}/installed/"
